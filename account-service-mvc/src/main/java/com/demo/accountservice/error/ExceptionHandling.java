package com.demo.accountservice.error;

import java.net.URI;
import java.util.UUID;

import org.slf4j.MDC;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.zalando.problem.Problem;
import org.zalando.problem.Status;
import org.zalando.problem.spring.web.advice.ProblemHandling;

import lombok.extern.slf4j.Slf4j;

@ControllerAdvice
@Slf4j
public class ExceptionHandling implements ProblemHandling {

	@ExceptionHandler(DemoNotWorkingException.class)
	public ResponseEntity<Problem> handleDemoNotWorkingException(DemoNotWorkingException ex) {

		try {
			// TODO: it's a workaround. MdcJsonProvider override output generated by
			// UuidProvider. See others approaches :|
			String messageId = UUID.randomUUID().toString();
			MDC.put("message_id", messageId);

			log.error("Oops!, an error has ocurred", ex);

			return ResponseEntity.unprocessableEntity().body(Problem.builder()
					.withType(URI.create("https://dev-portal.nx.com/account/houston-we-have-a-problem"))
					.withTitle("Houston, we have a Problem").withDetail("An problem has ocurred :(")
					.withStatus(Status.UNPROCESSABLE_ENTITY).withInstance(URI.create("urn:uuid:".concat(messageId))) // https://tools.ietf.org/html/rfc4122
					.build());
		} finally {
			MDC.remove("message_id");
		}
	}
}
